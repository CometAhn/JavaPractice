그래픽 사용자 인터페이스 기반의 입출력을 제공하는 쉬운 방법들 중 하나는 ???클래스를 사용하는 것
??? 클래스는 대화상자(dialog box)라고 불리는 특별한 창을 만들기 위해 사용한다.

static String ShowMessageDialog(Component parent, Object msg)
: 지정된 msg를 포함하는 메세지 대화 상자를 보여준다.
parent 컴포넌트가 null이면 대화 상자가 스크린 중앙에 위치한다.
static String ShowInputDialog(Object msg)
 : 지정된 msg와 사용자로부터 입력을 받기 위한 텍스트 필드와 '확인/취소' 단추를 포함하는 입력 대화 상자를 보여준다.
 입력된 텍스트 필드의 내용을 반환한다.
static String ShowConfirmDialog(Component parent, Object msg)
 : 저장된 msg와 '예/아니오/취소' 단추 선택사항들을 포함하는 확인 대화 상자를 보여준다.
 parent 컴포넌트가 null이면 대화 상자가 스크린 중앙에 위치한다.

자바 GUI 프로그램
일반 자바 프로그램 : swing, awt
대화상자 이용법 : JOptionPane
애플릿 : 현재 사용 안함 : JDK 1.8이하만 지원

// Exception 복습
Exception 클래스 종류
- Compile Checked Exception 계열
소스 코드를 컴파일 할 때 예왜 처리 여부를 검사하는 클래스 계열이다.
이 경우 소스 코드에 예외 처리 코드를 구현하지 않으면 컴파일 할 때에 에러가 발생한다.
IOException 클래스와 SQLException 클래스가 이에 해당한다. 자바I/O 작업 또는 SQL처리 작업을 하기 위해서는 명시적으로 반드시 예외 처리를 해야 한다는 의미가 된다.

- Compile Unchecked Exception 계열
소스 코드를 컴파일 할 때 예외 처리 여부를 검사하지 않는 클래스 계열이다.
RuntileException 클래스가 이에 해당한다.
컴파일 할 때 예외 처리 여부를 검사하지 않는 이유는 발생하는 대부분의 예외가 개발자의 부주의한 코드 작업 때문에 발생하기 때문이다.
값을 0으로 나누거나 null값을 가지고 메소드를 호출하거나 배열의 크기보다 큰 인덱스 값을 이용해서 배열 요소에 접근하는 경우 등이다.

Complie Unchecked Exception 계열의 문제는 코드를 이용한 검증 작업으로 충분히 예외 발생을 미리 방지할 수 있다.

RuntimeException 클래스 - 하위 클래스 예외
- ArithmeticException : 0으로 나누는 경우에 발생
- NullPointException : null 값을 가진 참조 변수를 이용하여 객체 멤버에 접근할 때 발생
- ArrayIndexOutOFBoundsException : 배열의 Index(첨자) 범위를 넘어서 참조하는 경우에 발생
- ClassCastException : 형변환을 수행할 때 객체의 타입이 일치하지 않으면 발생

예외처리 방법
- try~catch ~ finally문 이용
- throws 키워드 이용한 예외 처리 위임

try ~ catch 블록을 이용하는 방법은 try블록 안에는 예외 발생 코드를 정의하고 catch 블록 안에는 예외 처리 코드를 정의한다.
finally문은 생략할 수 있다.

	try{
		//예외 코드 발생
	}catch(예외 클래스명 변수명){
		//예외 처리 코드
	}

다중 catch
	try{
		//예외 발생코드 1
		// 예외 발생코드 2
		} catch(예외 클래스명 변수명) {
		// 예외 처리 코드
	} catch(예외 클래스명 변수명) {
		// 예외 처리 코드
	}

finally 블록을 이용하는 방법
	try{
		//예외 발생 코드
	} catch(예외 클래스명 변수명) {
		// 에외 처리 코드
	} finally {
		// 반드시 수행하는 문장
	}

catch 문이 없는 try ~ finally문 - 예외처리  목적이 아닌 반드시 수행되어야 하는 문장임을 알리는 목적이다.
	try{
		//예외 발생 코드
	} finally {
		// 반드시 수행하는 문장
	}

throws  키워드를 이용한 예외 처리 위임


throw 키워드를 이용한 명시적 예외 발생
시스템은 자동으로 예외를 ㅏㄹ생시키고 적합한 예외 클래스를 사용하여 예외 처리를 할 수 있도록 지원한다.
특정 개발자가 만든 프로그램에서 특정 조건에 맞지 않는 경우의 예외
특정 값이 100보다 작은 경우에 예외

XXException e = new XXException([인자]);
throw e;
또는
throw new XX;